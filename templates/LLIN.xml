<templateSet group="LLIN">
  <template name="log" value="private static final Logger LOGGER = LoggerFactory.getLogger($CLASS_NAME$.class);" description="Logger" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="COMPLETION" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
    </context>
  </template>
  <template name="fixme" value="// FIXME (louis.lin): " description="fixme" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="todo" value="// TODO (louis.lin): " description="todo" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="tt" value="var tests = map[string]struct {&#10;  given string&#10;  expected string&#10;}{&#10;  &quot;$BEGIN$&quot;: {&#10;    given: &quot;$END$&quot;,&#10;    expected: &quot;&quot;,&#10;  },&#10;}&#10;for name, tt := range tests {&#10;  t.Run(name, func(t *testing.T){&#10;    actual := $FUNCTION$(tt.given)&#10;    if actual != tt.expected {&#10;        t.Errorf(&quot;expected %v, actual %v&quot;, tt.expected, actual)&#10;    }&#10;  })&#10;}&#10;" description="tabletest" toReformat="true" toShortenFQNames="true">
    <variable name="BEGIN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
</templateSet>